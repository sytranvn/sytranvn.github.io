<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>v8 on Sy Tran's blog</title><link>http://sytranvn.com/categories/v8/</link><description>Recent content in v8 on Sy Tran's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 10 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://sytranvn.com/categories/v8/index.xml" rel="self" type="application/rss+xml"/><item><title>Debug V8 variables part 2</title><link>http://sytranvn.com/posts/debug-v8-variables-part-2/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.com/posts/debug-v8-variables-part-2/</guid><description>In previous part, we have learnt how to debug d8 with lldb. In this part we still use our debug.js script. But we&amp;rsquo;ll add an other parameter to d8 before running process.
lldb -- d8 --parse-only debug.js With parse-only flag, we will forcus on how d8 parse source content and turn into lexical input elements.
Let&amp;rsquo;s add a breakpoint in v8::Shell::RunMain function and jump to it.
(lldb) b v8::Shell::RunMain (lldb) run frame #0: 0x000000010004ba68 d8`v8::Shell::RunMain(isolate=0x0000000118110000, last_run=true) at d8.</description></item><item><title>V8 bookmarks</title><link>http://sytranvn.com/posts/v8-bookmarks/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.com/posts/v8-bookmarks/</guid><description>Data structures String https://v8docs.nodesource.com/node-0.8/d2/db3/classv8_1_1_string.html</description></item><item><title>Debug V8 variables part 1</title><link>http://sytranvn.com/posts/debug-v8-variables-part-1/</link><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.com/posts/debug-v8-variables-part-1/</guid><description>3 things to do before debugging V8 Build d8 with debug flags from V8 source Install lldb A javascript file Build d8 with debug flags from V8 source If you haven&amp;rsquo;t tried building V8 before, take a look at my other blog on how to build V8 from source on Ubuntu and Mac M1. Now we just need to make sure the d8 binary is built with debug flag instead of release.</description></item><item><title>Allocation</title><link>http://sytranvn.com/posts/allocation/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.com/posts/allocation/</guid><description>Allocation in V8 V8 allocate C free store using malloc and free.
void* Malloced::New(size_t size) { ASSERT(NativeAllocationChecker::allocation_allowed()); void* result = malloc(size); if (result == NULL) V8::FatalProcessOutOfMemory(&amp;#34;Malloced operator new&amp;#34;); return result; } void Malloced::Delete(void* p) { free(p); } Besides of that, V8 defined a PreallocatedStorage (double linked list) to manage allocated memorry. Link chunks
Unlink
When we need to allocate some memorry, first V8 will find available memorry chunk in free_list_ that fit before call Malloced::New() to allocate new memorry.</description></item><item><title>Token</title><link>http://sytranvn.com/posts/token/</link><pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.com/posts/token/</guid><description>Token All tokens are defined by a macro TOKEN_LIST. It takes a list of 3 macros M all of which satisfy the same signature M(name, string, precedence), where name is the symbolic token name, string is the corresponding syntactic symbol (or NULL, for literals), and precedence is the precedence (or 0). The parameters are invoked for token categories as follows:
T: Non-keyword tokens K: Keyword tokens F: Future (reserved) keyword tokens // token.</description></item><item><title>V8 adventure</title><link>http://sytranvn.com/posts/v8-adventure/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.com/posts/v8-adventure/</guid><description>Study the v8 source code from the beginning and more.
Why V8 and why from the beginning? I&amp;rsquo;m working mostly as Javascript developer, but I&amp;rsquo;m also interested in C++ source code. V8 is perfect land for me to explorer interesting C++ concepts and to understand Javascript better. Current code base of V8 is huge, I cannot jump right into it and learn everything. So I decide to go back in time to see V8 in its initial shape.</description></item><item><title>Build v8 from source on Apple M1</title><link>http://sytranvn.com/posts/build-v8-from-source-on-apple-m1/</link><pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.com/posts/build-v8-from-source-on-apple-m1/</guid><description>Follow up Build v8 from source on Ubuntu 20.04. Today we&amp;rsquo;re gonna build v8 source on an Apple M1 chip MacOS.
Required bash shell git Xcode python2 I set up the V8 source code inside ~/Code/ folder and use it throughout this article. You can change it to your desired folder.
Prepare the tools and source code First we need to get the depot tools bundle from google.</description></item><item><title>Build v8 from source on Ubuntu 20.04</title><link>http://sytranvn.com/posts/build-v8-from-source/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.com/posts/build-v8-from-source/</guid><description>Have you ever asked what does V8 do? Here&amp;rsquo;s how to build a V8 of your own from source code. See what it can do and even have fun with it.
Required bash shell git I set up the V8 source code inside ~/Code/ folder and use it throughout this article. You can change it to your desired folder.
Prepare the tools and source code We need to get the depot tools bundle from google.</description></item><item><title>Tricks</title><link>http://sytranvn.com/posts/tricks/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.com/posts/tricks/</guid><description>Some tricks I found when dealing with V8 giant code base
Macros, macros every where Having problem understanding v8 macros? Add this where ever you want static const int IAmHere = 1; And run g++ -g -Wall -I. -Iinclude -I... header.h -E -D DEBUG &amp;gt; header.h.o Search for IAmHere in header.h.o file generated Have fun To be continued The do while (false) macro #define ASSEMBLE_BINOP(asm_instr) \ do { \ if (HasAddressingMode(instr)) { \ size_t index = 1; \ Operand right = i.</description></item></channel></rss>