<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>V8 Adventure on sytranvn.dev</title>
    <link>https://sytranvn.dev/series/v8-adventure/</link>
    <description>Recent content in V8 Adventure on sytranvn.dev</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Feb 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sytranvn.dev/series/v8-adventure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Debug V8 part 2</title>
      <link>https://sytranvn.dev/posts/debug-v8-part-2/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://sytranvn.dev/posts/debug-v8-part-2/</guid>
      <description>&lt;p&gt;In previous part, we have learnt how to debug &lt;code&gt;d8&lt;/code&gt; with &lt;code&gt;lldb&lt;/code&gt;. In this part&#xA;we still use our &lt;code&gt;debug.js&lt;/code&gt; script. But we&amp;rsquo;ll add an other parameter to &lt;code&gt;d8&lt;/code&gt;&#xA;before running process.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lldb -- d8 --parse-only debug.js&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With &lt;code&gt;parse-only&lt;/code&gt; flag, we will forcus on how &lt;code&gt;d8&lt;/code&gt; parse source content and&#xA;turn into lexical input elements.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s add a breakpoint in &lt;code&gt;v8::Shell::RunMain&lt;/code&gt; function and jump to it.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; b v8::Shell::RunMain&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; run&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;frame &lt;span class=&#34;c1&#34;&gt;#0: 0x000000010004ba68 d8`v8::Shell::RunMain(isolate=0x0000000118110000, last_run=true) at d8.cc:4578:12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   4575&#x9;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;m&#34;&gt;4576&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   4577&#x9;int Shell::RunMain&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Isolate* isolate, bool last_run&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-&amp;gt; 4578&#x9;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;int &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; i &amp;lt; options.num_isolates&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; ++i&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   4579&#x9;    options.isolate_sources&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.StartExecuteInThread&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   4580&#x9;  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   4581&#x9;  bool &lt;span class=&#34;nv&#34;&gt;success&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At line 4578, we will loop through different isolate sources and execute them&#xA;in threads. But as our &lt;code&gt;options.num_isolates = 1&lt;/code&gt;, we don&amp;rsquo;t need to worry about&#xA;multi-threads at this point.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debug V8 part 1</title>
      <link>https://sytranvn.dev/posts/debug-v8-part-1/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://sytranvn.dev/posts/debug-v8-part-1/</guid>
      <description>&lt;h2 id=&#34;3-things-to-do-before-debugging-v8&#34;&gt;&#xA;  3 things to do before debugging V8&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#3-things-to-do-before-debugging-v8&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#build-d8-with-debug-flags-from-v8-source&#34; &gt;Build d8 with debug flags from V8 source&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#install-lldb&#34; &gt;Install lldb&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#create-a-js-file&#34; &gt;A javascript file&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;build-d8-with-debug-flags-from-v8-source&#34;&gt;&#xA;  Build d8 with debug flags from V8 source&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#build-d8-with-debug-flags-from-v8-source&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;If you haven&amp;rsquo;t tried building V8 before, take a look at my other blog on how to&#xA;build V8 from source on &lt;a href=&#34;https://sytranvn.dev/posts/build-v8-from-source/&#34; &gt;Ubuntu&lt;/a&gt; and&#xA;&lt;a href=&#34;https://sytranvn.dev/posts/build-v8-from-source-on-apple-m1/&#34; &gt;Mac M1&lt;/a&gt;. Now we just need to make sure the d8&#xA;binary is built with &lt;code&gt;debug&lt;/code&gt; flag instead of &lt;code&gt;release&lt;/code&gt;.&#xA;You can run this command &lt;code&gt;gm.py arm64.debug.d8&lt;/code&gt;. Or incase you have built a&#xA;release version and don&amp;rsquo;t want to rebuild everything. Open&#xA;&lt;code&gt;out/release/args.gn&lt;/code&gt; file and update following options.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Token</title>
      <link>https://sytranvn.dev/posts/token/</link>
      <pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://sytranvn.dev/posts/token/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;If you don&amp;rsquo;t know how it works, find out. If you&amp;rsquo;re not sure if it will work, try it. If it doesn&amp;rsquo;t make sense, play with it until it does. If it&amp;rsquo;s not broken, break it. If it might not be true, find out.&lt;/p&gt;&#xA;&lt;p&gt;Seth Godin&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;token&#34;&gt;&#xA;  Token&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#token&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;All tokens are defined by a macro &lt;code&gt;TOKEN_LIST&lt;/code&gt;. It takes a list of 3 macros M all of which satisfy the same signature M(name, string, precedence), where name is the symbolic token name, string is the corresponding syntactic symbol (or NULL, for literals), and precedence is the precedence (or 0).&#xA;The parameters are invoked for token categories as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build v8 from source on Apple M1</title>
      <link>https://sytranvn.dev/posts/build-v8-from-source-on-apple-m1/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://sytranvn.dev/posts/build-v8-from-source-on-apple-m1/</guid>
      <description>&lt;p&gt;Follow up &lt;a href=&#34;https://sytranvn.dev/posts/build-v8-from-source/&#34; &gt;Build v8 from source on Ubuntu 20.04&lt;/a&gt;. Today we&amp;rsquo;re gonna build v8 source on an Apple M1 chip MacOS.&lt;/p&gt;&#xA;&lt;h2 id=&#34;required&#34;&gt;&#xA;  Required&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#required&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bash shell&lt;/li&gt;&#xA;&lt;li&gt;git&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/vn/app/xcode/id497799835?mt=12&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;python2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I  set up the V8 source code inside &lt;code&gt;~/Code/&lt;/code&gt; folder and use it throughout this article. You can change it to your desired folder.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prepare-the-tools-and-source-code&#34;&gt;&#xA;  Prepare the tools and source code&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#prepare-the-tools-and-source-code&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;First we need to get the depot tools bundle from google. It&amp;rsquo;s a package of scripts, to automate tasks to manage repositories &lt;a href=&#34;http://www.chromium.org/developers/how-tos/install-depot-tools&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.chromium.org/developers/how-tos/install-depot-tools&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build v8 from source on Ubuntu 20.04</title>
      <link>https://sytranvn.dev/posts/build-v8-from-source/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://sytranvn.dev/posts/build-v8-from-source/</guid>
      <description>&lt;p&gt;Have you ever asked what does V8 do? Here&amp;rsquo;s how to build a V8 of your own from source code. See what it can do and even have fun with it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;required&#34;&gt;&#xA;  Required&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#required&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bash shell&lt;/li&gt;&#xA;&lt;li&gt;git&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I  set up the V8 source code inside &lt;code&gt;~/Code/&lt;/code&gt; folder and use it throughout this article. You can change it to your desired folder.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prepare-the-tools-and-source-code&#34;&gt;&#xA;  Prepare the tools and source code&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#prepare-the-tools-and-source-code&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We need to get the depot tools bundle from google. It&amp;rsquo;s a package of scripts, to automate tasks to manage repositories &lt;a href=&#34;http://www.chromium.org/developers/how-tos/install-depot-tools&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.chromium.org/developers/how-tos/install-depot-tools&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>V8 adventure</title>
      <link>https://sytranvn.dev/posts/v8-adventure/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://sytranvn.dev/posts/v8-adventure/</guid>
      <description>&lt;p&gt;Study the v8 source code from the beginning and more.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-v8-and-why-from-the-beginning&#34;&gt;&#xA;  Why V8 and why from the beginning?&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#why-v8-and-why-from-the-beginning&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;I&amp;rsquo;m working mostly as Javascript developer, but I&amp;rsquo;m also interested in C++ source code.&#xA;V8 is perfect land for me to explorer interesting C++ concepts and to understand Javascript better.&lt;/li&gt;&#xA;&lt;li&gt;Current code base of V8 is huge, I cannot jump right into it and learn everything.&#xA;So I decide to go back in time to see V8 in its initial shape. Less toolings, hacks, optimizations&amp;hellip; that I&#xA;can not digest right now.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;what-do-ive-known-before-start-studying-v8-and-you-should-too&#34;&gt;&#xA;  What do I&amp;rsquo;ve known before start studying V8 and you should too&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-do-ive-known-before-start-studying-v8-and-you-should-too&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++, of course (my level is about basic to low intermediate)&lt;/li&gt;&#xA;&lt;li&gt;Algorithms and Data structure (important)&lt;/li&gt;&#xA;&lt;li&gt;I read a book about &lt;a href=&#34;https://craftinginterpreters.com/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;implementing scripting language&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Love reading people&amp;rsquo;s code &amp;#x1f4af;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;if-you-are-still-reading&#34;&gt;&#xA;  If you are still reading&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#if-you-are-still-reading&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Good luck to us. I don&amp;rsquo;t know where this will lead us to. I hope we can take some thing out of the ancient V8 that still valid in most recent versions.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
