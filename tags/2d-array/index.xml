<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2d-Array on sytranvn.dev</title><link>https://sytranvn.dev/tags/2d-array/</link><description>Recent content in 2d-Array on sytranvn.dev</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 23 Mar 2024 11:11:12 +0700</lastBuildDate><atom:link href="https://sytranvn.dev/tags/2d-array/index.xml" rel="self" type="application/rss+xml"/><item><title>Modify Element in Zig 2D Array</title><link>https://sytranvn.dev/posts/modify-element-in-zig-array/</link><pubDate>Sat, 23 Mar 2024 11:11:12 +0700</pubDate><guid>https://sytranvn.dev/posts/modify-element-in-zig-array/</guid><description>&lt;p>So I&amp;rsquo;m learning Zig and trying to write a &lt;a href="https://vi.wikipedia.org/wiki/Arkanoid" class="external-link" target="_blank" rel="noopener">Arkanoid game&lt;/a> in Zig.&lt;br>
I have to iterate through 2D array of bricks, check collision and update each brick status.
This is easy to do with high level languages. With C++ vector, we can use range-based for loop like this.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> items;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> row : items) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>item: row) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> item &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With C, we have to do this old fashion way by accessing each brick by &lt;code>i&lt;/code> and &lt;code>j&lt;/code> indexes.&lt;/p></description></item></channel></rss>