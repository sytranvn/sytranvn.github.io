<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascripts on sytranvn.dev</title><link>https://sytranvn.dev/tags/javascripts/</link><description>Recent content in Javascripts on sytranvn.dev</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 11 Mar 2025 11:31:49 +0700</lastBuildDate><atom:link href="https://sytranvn.dev/tags/javascripts/index.xml" rel="self" type="application/rss+xml"/><item><title>Is Even or Is Not Even (part 2)</title><link>https://sytranvn.dev/posts/is-even-or-is-not-even-2/</link><pubDate>Tue, 11 Mar 2025 11:31:49 +0700</pubDate><guid>https://sytranvn.dev/posts/is-even-or-is-not-even-2/</guid><description>&lt;p>I was so curious how would JavaScript engine would optimize even check. Would
it use modulo as normal, which is very slow, or it can be smart enough to use
bitwise operator ðŸ¤” . Due to its dynamic behavior, variable can be of any type
and unknown to the compiler until run time.&lt;/p>
&lt;p>First, let&amp;rsquo;s create a simple mod function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">my_mod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">my_mod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Now we need a way to check how V8 compile our code. Luckily, we can view
bytecodes generated by V8 through node. We can use&lt;/p></description></item><item><title>Is Even or Is Not Even</title><link>https://sytranvn.dev/posts/is-even-or-is-not-even/</link><pubDate>Fri, 21 Feb 2025 22:29:37 +0700</pubDate><guid>https://sytranvn.dev/posts/is-even-or-is-not-even/</guid><description>&lt;p>However, when I look closely to the code, I realized something wasn&amp;rsquo;t right. I
can&amp;rsquo;t find the original post, so this is what I remember. The function is short
so I believe I won&amp;rsquo;t mess anything up.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">isEven&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In Javascripts, a number can be an &lt;code>integer&lt;/code>, &lt;code>decimal&lt;/code>, or &lt;code>NaN&lt;/code>, or &lt;code>Inf&lt;/code> or
event &lt;code>BigInt&lt;/code>. But let&amp;rsquo;s assume we only use this for &lt;code>integer&lt;/code>.&lt;/p>
&lt;p>This piece of code is wrong. If we plug a very &amp;ldquo;small&amp;rdquo; negative number in, for
example, &lt;code>-9007199249885170&lt;/code> which is greater than &lt;code>Number.MIN_SAFE_INTEGER = -(2^53-1)&lt;/code> is a safe integer. We get&lt;/p></description></item></channel></rss>