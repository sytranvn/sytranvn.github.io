<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>v8 on Sy Tran's blog</title><link>http://sytranvn.dev/tags/v8/</link><description>Recent content in v8 on Sy Tran's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 11 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://sytranvn.dev/tags/v8/index.xml" rel="self" type="application/rss+xml"/><item><title>Turbo fan part 1</title><link>http://sytranvn.dev/posts/turbo-fan-1/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/turbo-fan-1/</guid><description>function Obj(x, y) { this.x = x this.y = y this.add = function(other) { this.x += other.x this.y += other.y } } var N = arguments[0] var obj = new Obj(1, 1) for (let x = 1, y = 1; x &amp;lt; N; x++, y+=2) { var other = new Obj(x, y) obj.add(other) if (obj.x &amp;gt; 50000) { obj.z = obj.x + obj.y } } d8 --trace-opt --trace-deopt opt.js -- 50000 // x = 1134 [marking 0x287a00253a2d &amp;lt;JSFunction (sfi = 0x287a00253709)&amp;gt; for optimized recompilation, reason: hot and stable] [compiling method 0x287a00253a2d &amp;lt;JSFunction (sfi = 0x287a00253709)&amp;gt; (target TURBOFAN) using TurboFan OSR] [optimizing 0x287a00253a2d &amp;lt;JSFunction (sfi = 0x287a00253709)&amp;gt; (target TURBOFAN) - took 0.</description></item><item><title>Allocation</title><link>http://sytranvn.dev/posts/allocation/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/allocation/</guid><description>Allocation in V8 Link to heading V8 allocate C free store using malloc and free.
void* Malloced::New(size_t size) { ASSERT(NativeAllocationChecker::allocation_allowed()); void* result = malloc(size); if (result == NULL) V8::FatalProcessOutOfMemory(&amp;#34;Malloced operator new&amp;#34;); return result; } void Malloced::Delete(void* p) { free(p); } Besides of that, V8 defined a PreallocatedStorage (double linked list) to manage allocated memorry. link chunks unlink chunks When we need to allocate some memorry, first V8 will find available memorry chunk in free_list_ that fit before call Malloced::New() to allocate new memorry.</description></item><item><title>Token</title><link>http://sytranvn.dev/posts/token/</link><pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/token/</guid><description>If you don&amp;rsquo;t know how it works, find out. If you&amp;rsquo;re not sure if it will work, try it. If it doesn&amp;rsquo;t make sense, play with it until it does. If it&amp;rsquo;s not broken, break it. If it might not be true, find out.
Seth Godin
Token Link to heading All tokens are defined by a macro TOKEN_LIST. It takes a list of 3 macros M all of which satisfy the same signature M(name, string, precedence), where name is the symbolic token name, string is the corresponding syntactic symbol (or NULL, for literals), and precedence is the precedence (or 0).</description></item><item><title>Build v8 from source on Ubuntu 20.04</title><link>http://sytranvn.dev/posts/build-v8-from-source/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/build-v8-from-source/</guid><description>Have you ever asked what does V8 do? Here&amp;rsquo;s how to build a V8 of your own from source code. See what it can do and even have fun with it.
Required Link to heading bash shell git I set up the V8 source code inside ~/Code/ folder and use it throughout this article. You can change it to your desired folder.
Prepare the tools and source code Link to heading We need to get the depot tools bundle from google.</description></item><item><title>Misc</title><link>http://sytranvn.dev/posts/misc/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/misc/</guid><description>Some tricks I found when dealing with V8 giant code base
Macros, macros every where Link to heading Having problem understanding v8 macros? Add this where ever you want static const int IAmHere = 1; And run g++ -g -Wall -I. -Iinclude -I... header.h -E -D DEBUG &amp;gt; header.h.o Search for IAmHere in header.h.o file generated Have fun To be continued The do while (false) macro Link to heading #define ASSEMBLE_BINOP(asm_instr) \ do { \ if (HasAddressingMode(instr)) { \ size_t index = 1; \ Operand right = i.</description></item></channel></rss>