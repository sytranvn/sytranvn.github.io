<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reactjs on sytranvn.dev</title><link>http://sytranvn.dev/tags/reactjs/</link><description>Recent content in Reactjs on sytranvn.dev</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 12 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://sytranvn.dev/tags/reactjs/index.xml" rel="self" type="application/rss+xml"/><item><title>What I learned from reading reactjs tests</title><link>http://sytranvn.dev/posts/what-i-learned-from-reading-reactjs-tests/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/what-i-learned-from-reading-reactjs-tests/</guid><description>&lt;p>First of all, I think React DOM is one of the most interesting part in React code base. I&amp;rsquo;m not sure if it is correct but whatever, stop thinking and start diving.&lt;/p>
&lt;p>This is the &lt;a href="https://github.com/facebook/react/blob/9d48779b362ef773da50fef95af6998b560c75c0/packages/react-dom/src/__tests__/ReactDOM-test.js" class="external-link" target="_blank" rel="noopener">React-DOM test file&lt;/a> at the time I&amp;rsquo;m writing this post. If you find latest version is different from what mentioned in this post please feel free to make a PR.&lt;/p>
&lt;ul>
&lt;li>&lt;code>ReactDOM&lt;/code>
&lt;ul>
&lt;li>&lt;code>should bubble onSubmit&lt;/code>&lt;br>
So we can listen an &lt;code>onsubmit&lt;/code> event on a &lt;code>div&lt;/code>. That&amp;rsquo;s crazy right? Most of the time we only listen this event on a &lt;code>form&lt;/code> but in fact any tag can listen to this event if it has a form children.&lt;/li>
&lt;li>&lt;code>should overwrite props.children with children argument&lt;/code>&lt;br>
So for example if we have &lt;code>&amp;lt;Component children={'real'}&amp;gt;fake&amp;lt;/Component&amp;gt;&lt;/code>. We will get &lt;code>fake&lt;/code> as result.&lt;/li>
&lt;li>&lt;code>throws in render() if the update callback is not a function&lt;/code>&lt;br>
&lt;code>ReactDOM.render&lt;/code> supports an optional &lt;code>callback&lt;/code> parameters to be called after component is mounted into container. I look for &lt;a href="https://github.com/facebook/react/blob/dd8552ae0d82afed66fec649ee5c044c69c65e92/packages/react-dom/src/client/ReactDOMLegacy.js#L198-L204" class="external-link" target="_blank" rel="noopener">actual implementation&lt;/a> and find it callback &lt;code>fiberRoot&lt;/code> instance as &lt;code>this&lt;/code>. So you can &lt;code>console.log(this.nodeName)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ReactMount&lt;/code>
&lt;ul>
&lt;li>&lt;code>should unmount and remount if the key changes&lt;/code>&lt;br>
I have known this beavior of React key before, but it&amp;rsquo;s interesting to see it actually documented in the test.&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>