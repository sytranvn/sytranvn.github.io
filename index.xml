<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sy Tran's blog</title><link>http://sytranvn.dev/</link><description>Recent content on Sy Tran's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 16 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://sytranvn.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Latex cheat sheets</title><link>http://sytranvn.dev/posts/math/intro_to_latex/</link><pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/math/intro_to_latex/</guid><description>Introduction to LaTeX Link to heading In this tutorial, you will learn some of the basics on how to use $\LaTeX$ to display equations in Jupyter notebooks. For looking up symbols you may need, you can use any of the many cheat sheets you can find by asking Google. I have provided a few that will come up often in this course at the end of this lesson.</description></item><item><title>Limits</title><link>http://sytranvn.dev/posts/math/limits/</link><pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/math/limits/</guid><description>$$ \begin{aligned} \text{T√≠nh: }&amp;amp; L = \lim_{x \to +\infty}\bigg(\frac{x+1}{x+3}\bigg)^{x}\\ \text{Gi·∫£i: } &amp;amp; \\ \text{Ta c√≥: }&amp;amp; \\ L&amp;amp;=\lim_{x \to +\infty}\bigg(\frac{x+1}{x+3}\bigg)^x \\ &amp;amp;= \lim_{x \to +\infty}\bigg(\frac{x+3-2}{x+3}\bigg)^x \\ &amp;amp;= \lim_{x \to +\infty}\bigg(1 + \frac{-2}{x+3}\bigg)^x \\ \text{ƒê·∫∑t: } u&amp;amp;=\frac{-2}{x+3} \\ &amp;amp;\Leftrightarrow x+3 = \frac{-2}{u} \\ &amp;amp;\Leftrightarrow x = \frac{-2}{u} - 3 \\ \text{V√¨: } &amp;amp;\lim_{x \to +\infty}\bigg(\frac{-2}{x+3}\bigg) = 0 \Rightarrow \lim_{x \to +\infty}u = \lim_{u \to 0}u = 0 \\ \text{Do ƒë√≥: } &amp;amp;\\ L &amp;amp;= \lim_{x \to +\infty}\bigg(1 + \frac{-2}{x+3}\bigg)^x \\ &amp;amp;= \lim_{u \to 0}\bigg(1+u\bigg)^{\frac{-2}{u} -3} \\ &amp;amp;= \lim_{u \to 0}\bigg(1+u\bigg)^{\frac{-2}{u}}.</description></item><item><title>Deploy Tensoflow model on browser</title><link>http://sytranvn.dev/projects/mnist-js/</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/projects/mnist-js/</guid><description>For learning purpose, I deployed my trained model using Tensorflow trained on MNIST data set and deploy it on browser. The browser then can preprocess input image and make predictions without any extra calls to server. In practice this can be used with computer vision for lowering latancy. But we don&amp;rsquo;t really want to make our model publicly available to anyone.
This is how it looks like. Predict Clear First, we build a simple model.</description></item><item><title>Deploy ML model to Javascripts</title><link>http://sytranvn.dev/posts/deploy-ml-model-to-javascripts/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/deploy-ml-model-to-javascripts/</guid><description>Deploy trained model using Octave or Tensorflow to JS application.
The idea Link to heading When we train a model, the outcome is ussually the weights of hidden layers. All predictions will be calculated by inputs and the weights.
-&amp;gt; train model with training set -&amp;gt; export model&amp;#39;s weights -&amp;gt; load exported weights to JS -&amp;gt; normalize input data and predict Octave model to csv Link to heading Setup a model with tensorflow Link to heading Save weights Link to heading Save entire model Link to heading</description></item><item><title>Accomplishments</title><link>http://sytranvn.dev/accomplishments/</link><pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/accomplishments/</guid><description/></item><item><title>Turbo fan part 1</title><link>http://sytranvn.dev/posts/turbo-fan-1/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/turbo-fan-1/</guid><description>function Obj(x, y) { this.x = x this.y = y this.add = function(other) { this.x += other.x this.y += other.y } } var N = arguments[0] var obj = new Obj(1, 1) for (let x = 1, y = 1; x &amp;lt; N; x++, y+=2) { var other = new Obj(x, y) obj.add(other) if (obj.x &amp;gt; 50000) { obj.z = obj.x + obj.y } } d8 --trace-opt --trace-deopt opt.js -- 50000 // x = 1134 [marking 0x287a00253a2d &amp;lt;JSFunction (sfi = 0x287a00253709)&amp;gt; for optimized recompilation, reason: hot and stable] [compiling method 0x287a00253a2d &amp;lt;JSFunction (sfi = 0x287a00253709)&amp;gt; (target TURBOFAN) using TurboFan OSR] [optimizing 0x287a00253a2d &amp;lt;JSFunction (sfi = 0x287a00253709)&amp;gt; (target TURBOFAN) - took 0.</description></item><item><title>Bookmarks</title><link>http://sytranvn.dev/bookmarks/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/bookmarks/</guid><description>V8 Link to heading Data structures Link to heading String Link to heading https://v8docs.nodesource.com/node-0.8/d2/db3/classv8_1_1_string.html
Tools Link to heading C1 Visualizer</description></item><item><title>Debug V8 part 2</title><link>http://sytranvn.dev/posts/debug-v8-part-2/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/debug-v8-part-2/</guid><description>In previous part, we have learnt how to debug d8 with lldb. In this part we still use our debug.js script. But we&amp;rsquo;ll add an other parameter to d8 before running process.
lldb -- d8 --parse-only debug.js With parse-only flag, we will forcus on how d8 parse source content and turn into lexical input elements.
Let&amp;rsquo;s add a breakpoint in v8::Shell::RunMain function and jump to it.
(lldb) b v8::Shell::RunMain (lldb) run frame #0: 0x000000010004ba68 d8`v8::Shell::RunMain(isolate=0x0000000118110000, last_run=true) at d8.</description></item><item><title>Debug V8 part 1</title><link>http://sytranvn.dev/posts/debug-v8-part-1/</link><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/debug-v8-part-1/</guid><description>3 things to do before debugging V8 Link to heading Build d8 with debug flags from V8 source Install lldb A javascript file Build d8 with debug flags from V8 source Link to heading If you haven&amp;rsquo;t tried building V8 before, take a look at my other blog on how to build V8 from source on Ubuntu and Mac M1. Now we just need to make sure the d8 binary is built with debug flag instead of release.</description></item><item><title>About</title><link>http://sytranvn.dev/about/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/about/</guid><description>About me, Link to heading üòÑ Pronouns:  Éi: üåê Visit my blog üå± I‚Äôm currently learning V8, and also ML, and flute üî≠ I‚Äôm currently working on React SPA ‚öôÔ∏è My settings I know a little bit of Link to heading and a little bit of I pushed a few lines of code to Link to heading react 4e5d7fa ssh-chat owncast-admin 2e6456c chrome-extension-cli e2df8d5</description></item><item><title>Config</title><link>http://sytranvn.dev/dotfiles/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/dotfiles/</guid><description>iTerm Link to heading iterm2.plist
zsh Link to heading # autoload -U compaudit compinit colors # compaudit &amp;amp;&amp;amp; compinit &amp;amp;&amp;amp; colors autoload -U colors &amp;amp;&amp;amp; colors export EDITOR=&amp;#39;vim&amp;#39; setopt HIST_IGNORE_ALL_DUPS setopt HIST_IGNORE_SPACE eval &amp;#34;$(/opt/homebrew/bin/brew shellenv)&amp;#34; export NVM_DIR=&amp;#34;$HOME/.nvm&amp;#34; [ -s &amp;#34;$NVM_DIR/nvm.sh&amp;#34; ] &amp;amp;&amp;amp; \. &amp;#34;$NVM_DIR/nvm.sh&amp;#34; # This loads nvm [ -s &amp;#34;$NVM_DIR/bash_completion&amp;#34; ] &amp;amp;&amp;amp; \. &amp;#34;$NVM_DIR/bash_completion&amp;#34; # This loads nvm bash_completion eval &amp;#34;$(direnv hook zsh)&amp;#34; source ~/.</description></item><item><title>Allocation</title><link>http://sytranvn.dev/posts/allocation/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/allocation/</guid><description>Allocation in V8 Link to heading V8 allocate C free store using malloc and free.
void* Malloced::New(size_t size) { ASSERT(NativeAllocationChecker::allocation_allowed()); void* result = malloc(size); if (result == NULL) V8::FatalProcessOutOfMemory(&amp;#34;Malloced operator new&amp;#34;); return result; } void Malloced::Delete(void* p) { free(p); } Besides of that, V8 defined a PreallocatedStorage (double linked list) to manage allocated memorry. link chunks unlink chunks When we need to allocate some memorry, first V8 will find available memorry chunk in free_list_ that fit before call Malloced::New() to allocate new memorry.</description></item><item><title>Token</title><link>http://sytranvn.dev/posts/token/</link><pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/token/</guid><description>If you don&amp;rsquo;t know how it works, find out. If you&amp;rsquo;re not sure if it will work, try it. If it doesn&amp;rsquo;t make sense, play with it until it does. If it&amp;rsquo;s not broken, break it. If it might not be true, find out.
Seth Godin
Token Link to heading All tokens are defined by a macro TOKEN_LIST. It takes a list of 3 macros M all of which satisfy the same signature M(name, string, precedence), where name is the symbolic token name, string is the corresponding syntactic symbol (or NULL, for literals), and precedence is the precedence (or 0).</description></item><item><title>Build v8 from source on Apple M1</title><link>http://sytranvn.dev/posts/build-v8-from-source-on-apple-m1/</link><pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/build-v8-from-source-on-apple-m1/</guid><description>Follow up Build v8 from source on Ubuntu 20.04. Today we&amp;rsquo;re gonna build v8 source on an Apple M1 chip MacOS.
Required Link to heading bash shell git Xcode python2 I set up the V8 source code inside ~/Code/ folder and use it throughout this article. You can change it to your desired folder.
Prepare the tools and source code Link to heading First we need to get the depot tools bundle from google.</description></item><item><title>What I learned from reading reactjs tests</title><link>http://sytranvn.dev/posts/what-i-learned-from-reading-reactjs-tests/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/what-i-learned-from-reading-reactjs-tests/</guid><description>First of all, I think React DOM is one of the most interesting part in React code base. I&amp;rsquo;m not sure if it is correct but whatever, stop thinking and start diving.
This is the React-DOM test file at the time I&amp;rsquo;m writing this post. If you find latest version is different from what mentioned in this post please feel free to make a PR.
ReactDOM should bubble onSubmit</description></item><item><title>Build v8 from source on Ubuntu 20.04</title><link>http://sytranvn.dev/posts/build-v8-from-source/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/build-v8-from-source/</guid><description>Have you ever asked what does V8 do? Here&amp;rsquo;s how to build a V8 of your own from source code. See what it can do and even have fun with it.
Required Link to heading bash shell git I set up the V8 source code inside ~/Code/ folder and use it throughout this article. You can change it to your desired folder.
Prepare the tools and source code Link to heading We need to get the depot tools bundle from google.</description></item><item><title>Misc</title><link>http://sytranvn.dev/posts/misc/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/misc/</guid><description>Some tricks I found when dealing with V8 giant code base
Macros, macros every where Link to heading Having problem understanding v8 macros? Add this where ever you want static const int IAmHere = 1; And run g++ -g -Wall -I. -Iinclude -I... header.h -E -D DEBUG &amp;gt; header.h.o Search for IAmHere in header.h.o file generated Have fun To be continued The do while (false) macro Link to heading #define ASSEMBLE_BINOP(asm_instr) \ do { \ if (HasAddressingMode(instr)) { \ size_t index = 1; \ Operand right = i.</description></item><item><title>V8 adventure</title><link>http://sytranvn.dev/posts/v8-adventure/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/posts/v8-adventure/</guid><description>Study the v8 source code from the beginning and more.
Why V8 and why from the beginning? Link to heading I&amp;rsquo;m working mostly as Javascript developer, but I&amp;rsquo;m also interested in C++ source code. V8 is perfect land for me to explorer interesting C++ concepts and to understand Javascript better. Current code base of V8 is huge, I cannot jump right into it and learn everything. So I decide to go back in time to see V8 in its initial shape.</description></item><item><title>Hugo PDF</title><link>http://sytranvn.dev/projects/hugo-pdf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/projects/hugo-pdf/</guid><description>hugo-pdf Link to heading This shortcode allows you to add PDF file to your pages using browser native PDF renderer. Therefore, no additional Javascripts needed.
Installation Link to heading Copy the pdf.html to your layouts/shortcodes/ website directory. Or run follow commands from you website directory. Make a directory if not exist.
mkdir -p layouts/shortcodes Download pdf.html file.
# using curl curl -o layouts/shortcodes/pdf.html https://raw.githubusercontent.com/sytranvn/hugo-pdf/master/pdf.html # or wget wget https://raw.</description></item><item><title>Whoops! Page not found</title><link>http://sytranvn.dev/404/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://sytranvn.dev/404/</guid><description>That page can&amp;rsquo;t be found.
Our latest content is on the homepage.
Or checkout my recent blogs.</description></item></channel></rss>